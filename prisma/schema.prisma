// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// src/prisma/schema.prisma
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Recipe {
    id           String                @id @default(cuid())
    name         String
    description  String?
    servings     Int                   @default(1)
    prepTime     Int? // in minutes
    cookTime     Int? // in minutes
    // reference url for external recipes
    sourceUrl    String?
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @updatedAt
    createdBy    String // Clerk User ID
    mealType     MealType
    // relations
    ingredients  RecipeIngredient[]
    mealPlans    MealPlanRecipe[]
    instructions RecipeInstruction[]
    favourites   UserFavouriteRecipe[]
    shares       RecipeShare[]
}

model RecipeShare {
    id         String           @id @default(cuid())
    recipeId   String
    userId     String // Clerk User ID of the person it's shared with
    permission RecipePermission
    createdAt  DateTime         @default(now())
    recipe     Recipe           @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@unique([recipeId, userId])
    @@index([userId])
    @@index([recipeId])
}

enum RecipePermission {
    VIEW
    EDIT
}

model UserFavouriteRecipe {
    id        String   @id @default(cuid())
    userId    String // Clerk User ID
    recipeId  String
    createdAt DateTime @default(now())
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@unique([userId, recipeId])
    @@index([userId])
    @@index([recipeId])
}

model RecipeInstruction {
    id         String @id @default(cuid())
    recipeId   String
    step       String
    orderIndex Int // For maintaining order
    recipe     Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@index([recipeId])
    @@index([recipeId, orderIndex])
}

model Ingredient {
    id        String             @id @default(cuid())
    name      String             @unique
    category  String? // e.g., produce, meat, dairy
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
    // relations
    recipes   RecipeIngredient[]
}

model RecipeIngredient {
    id           String     @id @default(cuid())
    recipeId     String
    ingredientId String
    quantity     Float
    unit         String // e.g., grams, cups, tablespoons
    notes        String?
    // relations
    recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

    @@index([recipeId])
    @@index([ingredientId])
}

model MealPlan {
    id        String           @id @default(cuid())
    startDate DateTime
    endDate   DateTime
    createdBy String // Clerk User ID
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    // relations
    meals     MealPlanRecipe[]
}

model MealPlanRecipe {
    id         String   @id @default(cuid())
    mealPlanId String
    recipeId   String
    date       DateTime
    mealType   MealType
    servings   Int      @default(1)
    // relations
    mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
    recipe     Recipe   @relation(fields: [recipeId], references: [id])

    @@index([mealPlanId])
    @@index([recipeId])
}

enum MealType {
    BREAKFAST
    LUNCH
    DINNER
    SNACK
}
